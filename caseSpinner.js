export function startCaseSpin({
  containerId,
  stripId,
  tileWidth = 156,
  draftCategories,  // <-- –î–û–ë–ê–í–ò–õ–ò
  onWin = () => {}
}) {

    const container = document.getElementById(containerId);
    const strip = document.getElementById(stripId);
    const screenWidth = container.offsetWidth;
  
    // –ü–æ–ª—É—á–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∫–æ–º–∞–Ω–¥—ã –ø—Ä—è–º–æ –∑–¥–µ—Å—å
    const remaining = Array.from(document.querySelectorAll(".card"))
      .filter(c => !c.classList.contains("eliminated"))
      .map(c => c.dataset.team);
  
    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤—ã—Ö –ø–ª–∏—Ç–æ–∫ –∫–∞–∂–¥—ã–π —Ä–∞–∑
    const totalTiles = 150;
    strip.innerHTML = "";
  
    for (let i = 0; i < totalTiles; i++) {
      const teamName = remaining[Math.floor(Math.random() * remaining.length)];
      const tile = document.createElement("div");
      tile.className = "case-tile";
    
      const teamObj = Object.values(draftCategories).flat().find(t => t.name === teamName);
    
      if (teamObj && teamObj.logo) {
        tile.innerHTML = `
          <img src="assets/${teamObj.logo}" alt="${teamObj.name}" class="team-logo">
          <span class="team-name">${teamObj.name}</span>
        `;
        tile.dataset.team = teamObj.name;
      } else {
        tile.textContent = teamName || "‚ùì";
        tile.dataset.team = teamName || "Unknown";
      }
    
      strip.appendChild(tile);
    }
    
  
  // üé≤ –†–∞–Ω–¥–æ–º–Ω—ã–π –º–∏–∫—Ä–æ—Å–¥–≤–∏–≥ (—Å–¥–≤–∏–≥ –≤–ø–µ—Ä—ë–¥ –¥–æ 1 –ø–ª–∏—Ç–∫–∏)
  const initialOffset = Math.random() * tileWidth;
  strip.style.transform = `translateX(-${initialOffset}px)`;
    
    let current = initialOffset;
    let velocity = 0;
    let timeElapsed = 0;
    let phase = "acceleration";
    const intervalTime = 16;
  
    const interval = setInterval(() => {
      timeElapsed += intervalTime;
  
      if (phase === "acceleration") {
        velocity += 0.15;
        if (timeElapsed >= 3000) {
          phase = "constant";
          timeElapsed = 0;
        }
      } else if (phase === "constant") {
        if (timeElapsed >= 7000) {
          phase = "deceleration";
          timeElapsed = 0;
        }
      } else if (phase === "deceleration") {
        velocity *= 0.985;
        if (velocity < 0.4) {
            clearInterval(interval);
            strip.style.transform = `translateX(-${current}px)`;
            
            // ‚è≥ –¥–∞—ë–º 150 –º—Å –Ω–∞ –æ—Ç—Ä–∏—Å–æ–≤–∫—É, –ø–æ—Ç–æ–º –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
            setTimeout(() => {
                // ‚è≥ –ñ–î–Å–ú –µ—â–µ –∫–∞–¥—Ä –ø–æ—Å–ª–µ –æ—Ç—Ä–∏—Å–æ–≤–∫–∏
                requestAnimationFrame(() => {
                  const centerX = container.getBoundingClientRect().left + screenWidth / 2;
              
                  let closestTile = null;
                  let closestDistance = Infinity;
              
                  Array.from(strip.children).forEach(tile => {
                    const rect = tile.getBoundingClientRect();
                    const tileCenter = rect.left + rect.width / 2;
                    const distance = Math.abs(centerX - tileCenter);
              
                    if (distance < closestDistance) {
                      closestDistance = distance;
                      closestTile = tile;
                    }
                  });
              
                  const winnerName = closestTile?.dataset.team || closestTile?.textContent || "–û—à–∏–±–∫–∞";
                  onWin(winnerName);

                  // –°–±—Ä–æ—Å –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –º–∏–Ω–∏-–∏–≥—Ä—ã –∫ –ø–æ–∫–∞–∑—É
document.getElementById("reroll-game").classList.remove("hidden");
document.getElementById("reroll-final-message").textContent = "";
document.getElementById("reroll-tiles").innerHTML = "";
document.getElementById("reroll-start").disabled = true;
document.getElementById("reroll-shuffle").disabled = false;

                  
                  if (closestTile) {
                    closestTile.classList.add("winner"); 
                  }
                  
                  document.getElementById("reroll-game").classList.remove("hidden");
document.getElementById("reroll-final-message").textContent = "";

const tileContainer = document.getElementById("reroll-tiles");
const startBtn = document.getElementById("reroll-start");
const shuffleBtn = document.getElementById("reroll-shuffle");

let tileValues = [];

function generateTiles() {
  tileValues = ["fail", "fail", "fail", "fail", "fail", "fail", "fail", "fail", "reroll", "reroll-plus"];
  tileValues.sort(() => Math.random() - 0.5);
  tileContainer.innerHTML = "";

  tileValues.forEach(() => {
    const tile = document.createElement("div");
    tile.className = "reroll-tile";
    tileContainer.appendChild(tile);
  });
}

generateTiles();

shuffleBtn.onclick = () => {
  shuffleBtn.disabled = true;
  startBtn.disabled = false;

  tileValues.sort(() => Math.random() - 0.5);

  tileContainer.querySelectorAll(".reroll-tile").forEach((tile, index) => {
    tile.dataset.value = tileValues[index];
    tile.textContent = "‚ùì";
    tile.classList.remove("revealed", "fail", "reroll", "reroll-plus");
    tile.style.cursor = "not-allowed";
  });
};

startBtn.onclick = () => {
  startBtn.disabled = true;

  tileContainer.querySelectorAll(".reroll-tile").forEach(tile => {
    tile.style.cursor = "pointer";
    tile.onclick = () => {
      if (tile.classList.contains("revealed")) return;
    
      const value = tile.dataset.value;
      tile.classList.add("revealed", value);
      tile.textContent =
        value === "fail" ? "FAIL üò¢" :
        value === "reroll" ? "REROLL ‚úÖ" :
        "REROLL+ üî•";
    
      // –û—Ç–∫–ª—é—á–∞–µ–º –≤—Å–µ –∫–ª–∏–∫–∏
      tileContainer.querySelectorAll(".reroll-tile").forEach(t => (t.onclick = null));
    
      // üí• –í–°–ö–†–´–í–ê–ï–ú –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–ª–∏—Ç–∫–∏
      tileContainer.querySelectorAll(".reroll-tile").forEach(t => {
        if (t === tile) return; // —É–∂–µ –≤—Å–∫—Ä—ã—Ç–∞
    
        const val = t.dataset.value;
        t.textContent =
          val === "fail" ? "FAIL üò¢" :
          val === "reroll" ? "REROLL ‚úÖ" :
          "REROLL+ üî•";
    
        t.classList.add("revealed", "disabled");
        t.style.opacity = "0.4"; // —Å–µ—Ä—ã–π —ç—Ñ—Ñ–µ–∫—Ç
        t.style.filter = "grayscale(1)";
      });
    
      // —Å–æ–æ–±—â–µ–Ω–∏–µ
      if (value === "fail") {
        finalMsg.textContent = "–£–≤—ã! –í—Ç–æ—Ä–æ–π —à–∞–Ω—Å –Ω–µ –≤—ã–ø–∞–ª.";
        finalMsg.style.color = "#ff4444";
      } else {
        finalMsg.textContent = "üî• –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –¢—ã –ø–æ–ª—É—á–∏–ª —à–∞–Ω—Å –ø–µ—Ä–µ–∏–≥—Ä–∞—Ç—å –¥—Ä–∞—Ñ—Ç!";
        finalMsg.style.color = "#00ff88";
        setTimeout(() => {
          document.getElementById("restart-button").click();
        }, 2000);
      }
    };
    
  });
};


                  
                });
              }, 780);
              
            
        }
      }
  
      current += velocity;
      strip.style.transform = `translateX(-${current}px)`;
    }, intervalTime);
  }

  
  